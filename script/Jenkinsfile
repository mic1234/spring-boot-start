pipeline {
  agent {
    kubernetes {
      label 'podlabel'
      yaml """
kind: Pod
metadata:
  name: jenkins-agent
spec:
  containers:
  - name: maven
    image: gcr.io/cloud-builders/mvn
    imagePullPolicy: Always
    tty: true
    stdin: true
    command:
      - cat
  - name: jnlp
    image: 'jenkins/inbound-agent:4.3-4-alpine'
    args: ['\$(JENKINS_SECRET)', '\$(JENKINS_NAME)']
  - name: docker-daemon
    image: docker:19.03.1-dind
    securityContext:
      privileged: true
    volumeMounts:
    - name: docker-socket
      mountPath: /var/run
  - name: docker
    image: docker:19.03.1
    tty: true
    stdin: true
    command:
    - sleep
    args:
    - 99d
    volumeMounts:
    - name: docker-socket
      mountPath: /var/run
    - name: secret-vol
      mountPath: /secret
  - name: kubectl
    image: gcr.io/cloud-builders/kubectl
    command:
    - /bin/bash
    - -c
    - |
      !#/bin/bash
      /builder/google-cloud-sdk/bin/gcloud auth activate-service-account 570540125283-compute@developer.gserviceaccount.com --key-file=/secret/kaniko-secret.json
      /builder/google-cloud-sdk/bin/gcloud container clusters get-credentials application-cluster --zone us-east4-b
      while true; do date; sleep 1; done
    volumeMounts:
    - name: secret-vol
      mountPath: /secret
  - name: helm
    image: gcr.io/solar-botany-297306/helm
    command:
    - /bin/bash
    - -c
    - |
      gcloud auth activate-service-account 570540125283-compute@developer.gserviceaccount.com --key-file=/secret/kaniko-secret.json
      gcloud container clusters get-credentials application-cluster --zone us-east4-b
      while true; do date; sleep 1; done
    volumeMounts:
    - name: secret-vol
      mountPath: /secret
  - name: helmfile
    image: gcr.io/solar-botany-297306/helmfile
    command:
    - /bin/bash
    - -c
    - |
      while true; do date; sleep 1; done
    volumeMounts:
    - name: secret-vol
      mountPath: /secret
  restartPolicy: Never
  volumes:
  - name: docker-socket
    emptyDir: {}
  - name: secret-vol
    secret:
      secretName: kaniko-secret
"""
    }
  }
  environment {
    pipi = 'kiki'
  }
  stages {
    stage('Run maven') {
      steps {
        container('maven') {
          sh 'ls -al'
          sh 'pwd'
          sh 'mvn clean package'
        }
        container('docker') {
          sh 'ls -al'
          sh 'pwd'
          sh 'docker build . --tag=gcr.io/solar-botany-297306/gs-spring-boot-docker:v2 --no-cache'
          sh 'docker login -u _json_key -p "$(cat /secret/kaniko-secret.json)" http://gcr.io/'
          sh 'docker push gcr.io/solar-botany-297306/gs-spring-boot-docker:v2'
        }
        container('kubectl') {
          sh 'kubectl get all'
          sh 'kubectl delete --ignore-not-found=true deployment spring-boot-start'
          sh 'kubectl delete --ignore-not-found=true service spring-boot-start'
          sh 'kubectl run spring-boot-start --image gcr.io/solar-botany-297306/gs-spring-boot-docker@sha256:00ecfc56a25f2ab1a5da0227b7447c6d90c7a3d75e6555bc884712cfd15d2b07'
          sh 'kubectl expose deployment spring-boot-start --port 8080 --type LoadBalancer'
        }
        container('helm') {
          //sh 'helm uninstall my-sql'
          sh '''
              #!#/bin/bash
              helm repo add bitnami https://charts.bitnami.com/bitnami
              helm repo update
              echo "{print \\\$1}" | tee temp1.txt
              val=$(helm list | sed -n "2 p" | awk -f temp1.txt)
              echo "val= $val"
              while [ ${#val} -gt 0 ]; do helm uninstall $val; val=$(helm list | sed -n "2 p" | awk -f temp1.txt ); done
              helm install my-sql bitnami/mysql --version 8.2.3
              '''
        }
        container('helmfile') {
          sh 'chmod 755 ./script/print.sh'
          sh './script/print.sh'

          sh 'helmfile -v'

          sh 'echo "environment = ${environment}"'
          sh 'echo "location = ${location}"'
          sh 'echo "newvar = ${newvar}"'
          sh 'echo "dvar = ${dvar}"'
          sh 'echo "dvar1 = ${dvar1}"'
          sh 'echo "dvar2 = ${dvar2}"'
          sh 'echo "pipi = ${pipi}"'
          sh 'echo "hehe = ${hehe}"'
          sh 'echo "kaka = ${kaka}"'
          sh 'echo "koko = ${koko}"'

          echo "env.BUILD_URL = ${env.BUILD_URL}"
          echo "env.dvar = ${env.dvar}"
          echo "env.dvar1 = ${env.dvar1}"
          echo "env.dvar2 = ${env.dvar2}"
          echo "env.environment = ${env.environment}"
          echo "env.location = ${env.location}"
          echo "env.newvar = ${env.newvar}"
          echo "params.hehe = ${params.hehe}"
          echo "env.kaka = ${env.kaka}"
          echo "env.koko = ${env.koko}"
        }        
      }
    }
  }
}
